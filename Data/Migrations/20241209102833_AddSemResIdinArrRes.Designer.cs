// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentManagement.Data;

#nullable disable

namespace StudentManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241209102833_AddSemResIdinArrRes")]
    partial class AddSemResIdinArrRes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentManagement.Data.ArrearExamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ArrearExamMonthYear")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SemId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentScore")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.Property<int>("semesterResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("semesterResultId");

                    b.ToTable("ArrearExamResult");
                });

            modelBuilder.Entity("StudentManagement.Data.ConsolidateStudentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CGPA")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("NoOfArrearCleared")
                        .HasColumnType("integer");

                    b.Property<int?>("NoOfArrearPending")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("PassedOutYear")
                        .HasColumnType("date");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentRegNo")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalPapper")
                        .HasColumnType("integer");

                    b.Property<string>("classification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("ConsolidateStudentDetails");
                });

            modelBuilder.Entity("StudentManagement.Data.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("StudentManagement.Data.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BalanceDue")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("LastDueDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SemId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("paidAmount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("paymentMonthandYear")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("StudentManagement.Data.SemesterDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("SemType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSemFees")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("SemesterDetails");
                });

            modelBuilder.Entity("StudentManagement.Data.SemesterResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("MonthandYearOfExam")
                        .HasColumnType("date");

                    b.Property<int>("SemId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentSubScore")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("SemesterResult");
                });

            modelBuilder.Entity("StudentManagement.Data.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("Batch")
                        .HasColumnType("integer");

                    b.Property<decimal>("CutOffIn12th")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuardianPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegNo")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("SchlPassedOutYear")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentManagement.Data.Subjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentManagement.Data.ArrearExamResult", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("ArrearExamResult")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArrearExamResult_DepartmentID");

                    b.HasOne("StudentManagement.Data.SemesterDetails", "SemesterDetails")
                        .WithMany("ArrearExamResult")
                        .HasForeignKey("SemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArrearExamResult_SemId");

                    b.HasOne("StudentManagement.Data.Students", "Students")
                        .WithMany("ArrearExamResult")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArrearExamResult_StudentId");

                    b.HasOne("StudentManagement.Data.Subjects", "Subjects")
                        .WithMany("ArrearExamResult")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ArrearExamResult_SubjectId");

                    b.HasOne("StudentManagement.Data.SemesterResult", "SemesterResult")
                        .WithMany("ArrearExamResult")
                        .HasForeignKey("semesterResultId")
                        .IsRequired()
                        .HasConstraintName("FK_ArrearExamResult_semesterResultId");

                    b.Navigation("Department");

                    b.Navigation("SemesterDetails");

                    b.Navigation("SemesterResult");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentManagement.Data.ConsolidateStudentDetails", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("ConsolidateStudentDetails")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConsolidateStudentDetails_DepartmentID");

                    b.HasOne("StudentManagement.Data.Students", "Students")
                        .WithOne("ConsolidateStudentDetails")
                        .HasForeignKey("StudentManagement.Data.ConsolidateStudentDetails", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConsolidateStudentDetails_StudentId");

                    b.Navigation("Department");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagement.Data.Payment", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("Payment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_DepartmentID");

                    b.HasOne("StudentManagement.Data.SemesterDetails", "SemesterDetails")
                        .WithMany("Payment")
                        .HasForeignKey("SemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_SemId");

                    b.HasOne("StudentManagement.Data.Students", "Students")
                        .WithMany("payment")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_StudentId");

                    b.Navigation("Department");

                    b.Navigation("SemesterDetails");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentManagement.Data.SemesterResult", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("SemesterResult")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SemesterResult_DepartmentID");

                    b.HasOne("StudentManagement.Data.SemesterDetails", "semesterDetails")
                        .WithMany("SemesterResult")
                        .HasForeignKey("SemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SemesterResult_SemId");

                    b.HasOne("StudentManagement.Data.Students", "students")
                        .WithMany("SemesterResult")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SemesterResult_StudentId");

                    b.HasOne("StudentManagement.Data.Subjects", "Subjects")
                        .WithOne("SemesterResult")
                        .HasForeignKey("StudentManagement.Data.SemesterResult", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SemesterResult_SubjectId");

                    b.Navigation("Department");

                    b.Navigation("Subjects");

                    b.Navigation("semesterDetails");

                    b.Navigation("students");
                });

            modelBuilder.Entity("StudentManagement.Data.Students", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("Student")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentManagement.Data.Subjects", b =>
                {
                    b.HasOne("StudentManagement.Data.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subjects_DepartmentID");

                    b.HasOne("StudentManagement.Data.SemesterDetails", "Semester")
                        .WithMany("Subjects")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Subjects_SemesterId");

                    b.Navigation("Department");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("StudentManagement.Data.Department", b =>
                {
                    b.Navigation("ArrearExamResult");

                    b.Navigation("ConsolidateStudentDetails");

                    b.Navigation("Payment");

                    b.Navigation("SemesterResult");

                    b.Navigation("Student");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentManagement.Data.SemesterDetails", b =>
                {
                    b.Navigation("ArrearExamResult");

                    b.Navigation("Payment");

                    b.Navigation("SemesterResult");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentManagement.Data.SemesterResult", b =>
                {
                    b.Navigation("ArrearExamResult");
                });

            modelBuilder.Entity("StudentManagement.Data.Students", b =>
                {
                    b.Navigation("ArrearExamResult");

                    b.Navigation("ConsolidateStudentDetails")
                        .IsRequired();

                    b.Navigation("SemesterResult");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("StudentManagement.Data.Subjects", b =>
                {
                    b.Navigation("ArrearExamResult");

                    b.Navigation("SemesterResult")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
